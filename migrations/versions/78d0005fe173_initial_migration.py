"""Initial migration

Revision ID: 78d0005fe173
Revises: 
Create Date: 2025-08-08 14:52:40.831146

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '78d0005fe173'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Check if tables exist before creating
    conn = op.get_bind()
    inspector = sa.inspect(conn)

    # Create employee table if not exists
    if 'employee' not in inspector.get_table_names():
        op.create_table('employee',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('name', sa.VARCHAR(length=100), nullable=False),
        sa.Column('position', sa.VARCHAR(length=100), nullable=False),
        sa.Column('created_at', sa.DATETIME(), nullable=True),
        sa.Column('updated_at', sa.DATETIME(), nullable=True),
        sa.Column('password_hash', sa.VARCHAR(length=128), server_default=sa.text("'pbkdf2:sha256:150000$abc123$def456'")),
        sa.Column('is_admin', sa.BOOLEAN(), server_default=sa.text('(FALSE)')),
        sa.Column('employee_id', sa.VARCHAR(length=20), nullable=True),
        sa.Column('is_frozen', sa.BOOLEAN(), server_default=sa.text('0')),
        sa.PrimaryKeyConstraint('id')
        )

    # Create evaluation_task table if not exists
    if 'evaluation_task' not in inspector.get_table_names():
        op.create_table('evaluation_task',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('year', sa.INTEGER(), nullable=False),
        sa.Column('quarter', sa.INTEGER(), nullable=False),
        sa.Column('name', sa.VARCHAR(length=200), nullable=False),
        sa.Column('created_at', sa.DATETIME(), nullable=True),
        sa.Column('updated_at', sa.DATETIME(), nullable=True),
        sa.Column('status', sa.VARCHAR(length=20), server_default='published', nullable=False),
        sa.PrimaryKeyConstraint('id')
        )

    # Create evaluation_record table if not exists
    if 'evaluation_record' not in inspector.get_table_names():
        op.create_table('evaluation_record',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('evaluator_id', sa.INTEGER(), nullable=False),
        sa.Column('evaluatee_id', sa.INTEGER(), nullable=False),
        sa.Column('status', sa.VARCHAR(length=20), nullable=True),
        sa.Column('submitted_at', sa.DATETIME(), nullable=True),
        sa.Column('created_at', sa.DATETIME(), nullable=True),
        sa.Column('updated_at', sa.DATETIME(), nullable=True),
        sa.Column('task_id', sa.INTEGER(), nullable=True),
        sa.Column('withdrawal_reason', sa.TEXT(), nullable=True),
        sa.ForeignKeyConstraint(['evaluatee_id'], ['employee.id'], ),
        sa.ForeignKeyConstraint(['evaluator_id'], ['employee.id'], ),
        sa.ForeignKeyConstraint(['task_id'], ['evaluation_task.id'], ),
        sa.PrimaryKeyConstraint('id')
        )

    # Create evaluation_dimension table if not exists
    if 'evaluation_dimension' not in inspector.get_table_names():
        op.create_table('evaluation_dimension',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('name', sa.VARCHAR(length=100), nullable=False),
        sa.Column('weight', sa.FLOAT(), nullable=False),
        sa.Column('created_at', sa.DATETIME(), nullable=True),
        sa.Column('updated_at', sa.DATETIME(), nullable=True),
        sa.Column('status', sa.VARCHAR(length=20), server_default='active', nullable=False),
        sa.PrimaryKeyConstraint('id')
        )

    # Create evaluation_scores table with correct foreign key if not exists
    if 'evaluation_scores' not in inspector.get_table_names():
        op.create_table('evaluation_scores',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('evaluation_record_id', sa.INTEGER(), nullable=False),
        sa.Column('dimension_id', sa.INTEGER(), nullable=False),
        sa.Column('score', sa.FLOAT(), nullable=False),
        sa.Column('created_at', sa.DATETIME(), nullable=True),
        sa.Column('updated_at', sa.DATETIME(), nullable=True),
        sa.ForeignKeyConstraint(['dimension_id'], ['evaluation_dimension.id'], ),
        sa.ForeignKeyConstraint(['evaluation_record_id'], ['evaluation_record.id'], ),
        sa.PrimaryKeyConstraint('id')
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('evaluation_scores')
    op.drop_table('evaluation_dimension')
    op.drop_table('evaluation_record')
    op.drop_table('evaluation_task')
    op.drop_table('employee')
    # ### end Alembic commands ###
